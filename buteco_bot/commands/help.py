import discord
import aiohttp
from discord import app_commands
from tools.constants import (
    BALANCE_API_URL, CLIENT_API_URL, COIN_API_URL,
    BET_API_URL, AI_API_URL
)
import logging

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)


def help_commands(bot):    
    @bot.tree.command(name="health", description="Verifique o status de todos os microservi√ßos")
    async def health(interaction: discord.Interaction):
        """Check the health status of all microservices."""
        await interaction.response.defer(ephemeral=True)
        
        services = [
            ("Balance API", f"{BALANCE_API_URL}/health"),
            ("Client API", f"{CLIENT_API_URL}/health"),
            ("Coin API", f"{COIN_API_URL}/health"),
            ("Bet API", f"{BET_API_URL}/health"),
            ("AI API", f"{AI_API_URL}/health")
        ]
        
        embed = discord.Embed(
            title="üîß Status do Sistema",
            color=discord.Color.blue()
        )
        
        async with aiohttp.ClientSession() as session:
            for service_name, health_url in services:
                try:
                    async with session.get(health_url, timeout=5) as response:
                        if response.status == 200:
                            status_emoji = "üü¢"
                            status_text = "Online"
                        else:
                            status_emoji = "üü°"
                            status_text = f"Status: {response.status}"
                except:
                    status_emoji = "üî¥"
                    status_text = "Offline"
                
                embed.add_field(
                    name=f"{status_emoji} {service_name}",
                    value=status_text,
                    inline=True
                )
        
        embed.add_field(
            name="ü§ñ Status do Bot",
            value="üü¢ Online",
            inline=True
        )
        
        await interaction.followup.send(embed=embed, ephemeral=True)

    @bot.tree.command(name="help", description="Mostre todos os comandos dispon√≠veis")
    async def help(interaction: discord.Interaction):
        """Show help information."""
        logger.info(f"Help command requested by {interaction.user.display_name} ({interaction.user.id})")
        await interaction.response.defer(ephemeral=True)
        
        embed = discord.Embed(
            title="ü§ñ Buteco Bot - Comandos",
            description="Aqui est√£o todos os comandos slash dispon√≠veis:",
            color=discord.Color.blue()
        )
        
        commands_info = [
            ("üë§ **Comandos de Usu√°rio**", ""),
            ("/register", "Registre-se no sistema de economia"),
            ("/balance [usu√°rio]", "Verifique seu saldo ou de outro usu√°rio"),
            ("", ""),
            ("üí∞ **Comandos de Economia**", ""),
            ("/daily", "Colete suas moedas di√°rias (uma vez por dia)"),
            ("/transfer <usu√°rio> <valor> [descri√ß√£o]", "Transfira moedas para outro usu√°rio"),
            ("", ""),
            ("üé∞ **Comandos de Apostas**", ""),
            ("/bet_create <t√≠tulo> <descri√ß√£o> <op√ß√£o1> <op√ß√£o2>", "Criar nova aposta (Admin)"),
            ("/bet_list", "Listar apostas ativas"),
            ("/bet_info <event_id>", "Ver detalhes de uma aposta"),
            ("/bet_place <event_id> <op√ß√£o> <valor>", "Fazer uma aposta"),
            ("/bet_finalize <event_id> <op√ß√£o_vencedora>", "Finalizar aposta (Admin)"),
            ("/bet_cancel <event_id>", "Cancelar aposta e reembolsar (Admin)"),
            ("/my_bets", "Ver suas apostas"),
            ("", ""),
            ("üìä **Comandos de Informa√ß√£o**", ""),
            ("/leaderboard [limite]", "Mostre os melhores usu√°rios por saldo"),
            ("/history [limite]", "Veja seu hist√≥rico de transa√ß√µes"),
            ("/daily_history [limite]", "Veja seu hist√≥rico de coletas di√°rias"),
            ("", ""),
            ("üîß **Comandos do Sistema**", ""),
            ("/status", "Verifique o status dos microservi√ßos"),
            ("/help", "Mostre esta mensagem de ajuda"),
        ]
        
        description_lines = []
        for command, desc in commands_info:
            if command and desc:
                description_lines.append(f"**{command}**\n{desc}")
            elif command:
                description_lines.append(f"\n{command}")
        
        embed.description = "\n".join(description_lines)
        
        embed.add_field(
            name="üí° Dicas",
            value="‚Ä¢ Use `/register` antes de usar comandos de economia\n‚Ä¢ Moedas di√°rias resetam √† meia-noite UTC\n‚Ä¢ Apostas s√≥ podem ser feitas uma vez por evento\n‚Ä¢ Verifique `/status` se algo n√£o estiver funcionando",
            inline=False
        )
        
        try:
            await interaction.followup.send(embed=embed, ephemeral=True)
            logger.info(f"Successfully sent help command response to {interaction.user.display_name}")
        except Exception as e:
            logger.error(f"Failed to send help command response: {e}")
            try:
                await interaction.followup.send("Comando de ajuda temporariamente indispon√≠vel. Tente novamente mais tarde.", ephemeral=True)
            except:
                pass

    @bot.tree.command(name="codigo", description="Pega o reposit√≥rio do bot no GitHub")
    async def codigo(interaction: discord.Interaction):
        """Get the bot's source code repository."""
        await interaction.response.defer(ephemeral=True)
        
        embed = discord.Embed(
            title="üìÇ C√≥digo do Bot",
            description="Voc√™ pode encontrar o c√≥digo fonte do Bot do Buteco no GitHub:",
            color=discord.Color.green()
        )
        embed.add_field(
            name="Reposit√≥rio",
            value="[Buteco Bot no GitHub](https://github.com/butecodosdevs/butecobot-reloaded)",
            inline=False
        )
        embed.set_thumbnail(url="https://github.com/butecodosdevs/butecobot-reloaded")
        embed.set_footer(text="Aceita Contribui√ß√µes em qualquer linguagem \n\nLeia o README.md e siga o MICROSERVICE_GUIDE.md !")
        await interaction.followup.send(embed=embed, ephemeral=True)



    @bot.tree.error
    async def on_app_command_error(interaction: discord.Interaction, error: app_commands.AppCommandError):
        """Handle application command errors."""
        command_name = interaction.command.name if interaction.command else "unknown"
        user_info = f"{interaction.user.display_name} ({interaction.user.id})"
        logger.error(f"Command '{command_name}' raised an exception: {error} (User: {user_info})")
        
        embed = discord.Embed(
            title="‚ùå Erro no Comando",
            description="Ocorreu um erro ao processar seu comando.",
            color=discord.Color.red()
        )
        
        if isinstance(error, app_commands.CommandOnCooldown):
            embed.description = f"Comando em cooldown. Tente novamente em {error.retry_after:.2f} segundos."
        elif isinstance(error, app_commands.MissingPermissions):
            embed.description = "Voc√™ n√£o tem permiss√£o para usar este comando."
        else:
            embed.description = "Ocorreu um erro inesperado. Tente novamente mais tarde."
        
        try:
            if interaction.response.is_done():
                await interaction.followup.send(embed=embed, ephemeral=True)
            else:
                await interaction.response.send_message(embed=embed, ephemeral=True)
        except:
            pass
